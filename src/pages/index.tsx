import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import toast from 'react-hot-toast';
import { trpc } from '../utils/trpc';

const Home: NextPage = () => {
	const utils = trpc.useContext();
	const [productName, setProductName] = useState('');
	const [categoryName, setCategoryName] = useState('');
	const [productQuantity, setProductQuantity] = useState(0);

	// TODO create a component for toasters
	const notify = () => toast('Here is my toast!');
	const sucessNotify = () => toast.success('Sucess!');
	const errorNotify = (error: string) => toast.error(error);

	const categories = trpc.proxy.category.getAll.useQuery();
	const { mutateAsync } = trpc.proxy.category.create.useMutation({
		async onError(error: any) {
			if (error.message.includes('[\n')) {
				const parsedError = JSON.parse(error.message);
				errorNotify(parsedError[0].message);
				return;
			}

			errorNotify(error.message);
		},

		async onSuccess() {
			sucessNotify();

			// refetches categories after a category is added
			await utils.invalidateQueries('category.getAll');
		},
	});

	const addCategory = async () => {
		await mutateAsync({
			name: categoryName,
		});
		// setCategoryName('');
	};

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<div className='flex min-h-screen w-screen flex-col items-center justify-center overflow-y-scroll p-4 font-lato'>
				<label htmlFor='name'>Name</label>
				<input
					type='text'
					value={productName}
					onChange={(e) => setProductName(e.target.value)}
					id='name'
				/>
				<label htmlFor='category'>Category</label>
				<input
					type='text'
					value={categoryName}
					onChange={(e) => setCategoryName(e.target.value)}
					id='category'
				/>
				<label htmlFor='quantity'>Quantity</label>
				<input
					type='number'
					value={productQuantity}
					onChange={(e) => setProductQuantity(+e.target.value)}
					id='quantity'
				/>
				<input
					onClick={addCategory}
					type='button'
					value='Add Category'
				/>
				<h2 className='text-[3rem] font-extrabold text-gray-700 md:text-[5rem] lg:text-[5rem]'>
					Create <span className='text-purple-300'>T3</span> App
				</h2>
				<p className='text-2xl text-gray-700'>This stack uses</p>
				<div className='mt-3 grid w-full grid-cols-1 grid-rows-3 items-center justify-center gap-3 pt-3 md:w-full md:grid-cols-2 md:grid-rows-2 lg:w-2/3 lg:grid-cols-2 lg:grid-rows-2'>
					<div className='flex h-full w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-gray-500 p-6 text-center shadow-xl duration-500 hover:scale-105'>
						<h2 className='text-lg text-gray-700'>NextJS</h2>
						<p className='text-sm text-gray-600'>
							The React framework for production
						</p>
						<a
							className='mt-3 cursor-pointer text-sm text-violet-500 underline decoration-dotted underline-offset-2'
							href='https://nextjs.org/'
							target='_blank'
							rel='noreferrer'
						>
							Documentation
						</a>
					</div>
					<div className='flex h-full w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-gray-500 p-6 text-center shadow-xl duration-500 hover:scale-105'>
						<h2 className='text-lg text-gray-700'>TypeScript</h2>
						<p className='text-sm text-gray-600'>
							Strongly typed programming language that builds on
							JavaScript, giving you better tooling at any scale
						</p>
						<a
							className='mt-3 cursor-pointer text-sm text-violet-500 underline decoration-dotted underline-offset-2'
							href='https://www.typescriptlang.org/'
							target='_blank'
							rel='noreferrer'
						>
							Documentation
						</a>
					</div>
					<div className='flex h-full w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-gray-500 p-6 text-center shadow-xl duration-500 hover:scale-105'>
						<h2 className='text-lg text-gray-700'>TailwindCSS</h2>
						<p className='text-sm text-gray-600'>
							Rapidly build modern websites without ever leaving
							your HTML
						</p>
						<a
							className='mt-3 cursor-pointer text-sm text-violet-500 underline decoration-dotted underline-offset-2'
							href='https://tailwindcss.com/'
							target='_blank'
							rel='noreferrer'
						>
							Documentation
						</a>
					</div>
					<div className='flex h-full w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-gray-500 p-6 text-center shadow-xl duration-500 hover:scale-105'>
						<h2 className='text-lg text-gray-700'>tRPC</h2>
						<p className='text-sm text-gray-600'>
							End-to-end typesafe APIs made easy
						</p>
						<a
							className='mt-3 cursor-pointer text-sm text-violet-500 underline decoration-dotted underline-offset-2'
							href='https://trpc.io/'
							target='_blank'
							rel='noreferrer'
						>
							Documentation
						</a>
					</div>
				</div>
				<div className='flex w-full flex-col items-center justify-center pt-6 text-2xl text-blue-500'>
					{categories.data ? (
						<>
							{categories.data.map((category) => (
								<p key={category.id}>{category.name}</p>
							))}
						</>
					) : (
						<p>Loading..</p>
					)}
				</div>
			</div>
		</>
	);
};

export default Home;
